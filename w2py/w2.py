# Robert Toomey (retoomey)
# The main library for accessing our datatypes
#
# Read custom netcdf data files into ArcGIS using an ArcGIS toolbox python script
# Design the script to run from ArcGIS, or standalone using sys.args.
# For now, do lots of work here.  Some of this will migrate/separate later

import arcpy, os, shutil
import log
import w2py.resource as w2res
from netcdf import netcdf_util
from w2py.datatype import datatype as datatype
from w2py.datatype.latlongrid import LatLonGrid

def getReader(datafile, net):  
    """ Get the netcdf reader we will use to injest our data"""
    from netcdf import arcpy_netcdf_reader
    from netcdf import sci_netcdf_reader
    
    # Running in ArcGIS it doesn't reload python..this is for debuggng:
    if (log.debug):
        reload(arcpy_netcdf_reader)
        reload(sci_netcdf_reader)
        
    if ("SCIENTIFIC" in net):
        log.info("Using SCIENTIFIC python netcdf parser")
        return sci_netcdf_reader.sciNetcdfReader(datafile)
    else:
        log.info("Using ArcGIS netcdf parser (slow)")
        # Using ArcGIS NetCD.  So slow..so very, very slow
        return arcpy_netcdf_reader.arcpyNetcdfReader(datafile)

def generatePNGFile(D, featureLocation, outHTMLFolder, outputPNGfile, asymboll=""):  
    """ Given one of our DataType objects, and a arcgis Feature file, output the feature as a PNG.
        Return the full path to new image file"""
        
    # For our HTML generation, we will use a temporary .mxd file to do the imaging work...
    # MapDocument doesn't allow creating a new blank document, so we 'copy' our 'blank.mxd' to 
    # a temp file and use that
    blanktemplate = w2res.getArcgisFilename("blank.mxd")
    work = w2res.getTempFile(outHTMLFolder, "working.mxd")
    workpng = w2res.getTempFile(outHTMLFolder, outputPNGfile)
    
    # Clean up any old working files
    if os.path.isfile(work):
        os.remove(work)
    if os.path.isfile(workpng):
        os.remove(workpng)   
        
    # Copy our template to a working copy...
    shutil.copyfile(blanktemplate, work)
    mxd = arcpy.mapping.MapDocument(work)
    dataFrame = arcpy.mapping.ListDataFrames(mxd)[0]
    
    # Add a map layer to the dataframe...FIXME: make optional or choosable
    # FIXME: check for existance
    usashp = w2res.getArcgisFilename("usa.shp")
    usaSymLayer = w2res.getArcgisFilename("usa.lyr")
    log.info("USA LAYER FILE IS "+str(usaSymLayer))
    usaLayer = arcpy.mapping.Layer(usashp)
    arcpy.ApplySymbologyFromLayer_management(usaLayer, usaSymLayer)
    arcpy.mapping.AddLayer(dataFrame, usaLayer, "TOP")
    ext = usaLayer.getExtent()
    
    # Add our Raster image to the dataframe, if we have one
    if D.haveRaster() == True:
        iwidth = D.getImageWidth()
        iheight = D.getImageHeight()
    
        rasterLyr = arcpy.mapping.Layer(featureLocation)

        # Apply symbology if we have it...
        if asymboll:
            log.info("SYMBOLOGY LAYER FILE IS "+str(asymboll))
            arcpy.ApplySymbologyFromLayer_management(rasterLyr, asymboll)
        else:
            log.info("No symbology layer given, leaving default symbology in PNG") 
        
        arcpy.mapping.AddLayer(dataFrame, rasterLyr, "TOP")
        ext = rasterLyr.getExtent()
           
    else:
        # Output just a map for this file...
        iwidth = 500
        iheight = 200
    
    # Set the extent of the final output png.  We'll zoom to the  raster layer if possible,
    # or the map layer if possible
    dataFrame.extent = ext
    
    # Save the temp map and export to PNG  
    mxd.save()
    arcpy.mapping.ExportToPNG(mxd, workpng, dataFrame, iwidth, iheight, 300)
    log.info("Wrote png of arcgis map to "+workpng)
    
    # Clean up layers from memory and temp files
    del mxd, usaLayer
    if asymboll:
        del rasterLyr
    if os.path.isfile(work):
        os.remove(work)
    
    return workpng

def generateHTMLFile(D, outHTMLFolder, outputHTMLFile, inputPNGFile, indexLocation=""):  
    """ Given one of our DataType objects, image file and html location, generate one HTML page """
    workhtml = w2res.getTempFile(outHTMLFolder, outputHTMLFile)
    percentWidth = 90
    
    # Guess we 'could' use something like beautiful, but our html should be pretty simple,
    # it's the actual gathering of stats, etc. that was the fun part, lol
    # We'll keep the tags separate for clarity for now
    f = open(workhtml, "w")
    
    timestamp = D.getTime().strftime("%A, %d. %B %Y %I:%M%p")
    tName = D.getTypeName()
    fileName = D.getFileName()
    
    # Document header
    f.write("<!DOCTYPE html>\n")
    f.write("<!Generated by w2py library https://github.com/retoomey/wdss2python>\n")
    f.write("<!Robert Toomey retoomey@gmail.com>\n")
    f.write("<html>\n")
    f.write("<head>\n")
    f.write("<meta charset=\"UTF-8\">\n")
    f.write("<title>{0}-{1}</title>\n".format(tName, timestamp))
    f.write("</head>\n")
    f.write("<body>\n")
    
    # Return to table of contents if we have one
    if indexLocation:
        f.write("<a href=\"{0}\">Return to index</a><br>\n".format(indexLocation))
        
    f.write("Generated image output for file <b>\"{0}\"</b></br>\n".format(fileName))
    f.write("The type of data for this file is: <b>\"{0}\"</b></br>\n".format(tName))
    f.write("Timestamp of data is: <b>{0}</b><br>\n".format(D.getTime().strftime("%A, %d. %B %Y %I:%M%p")))
    
    # Insert the PNG file into the page
    f.write("<img src=\"{0}\" width=\"{1}%\" alt=\"data image\">\n".format(inputPNGFile, percentWidth))
    
    # Footer
    f.write("</body>\n")
    f.write("</html>\n")
    f.close()
    

def writeArcPyRaster(llg, outputlocation):
    """ Write a arc python Raster given  LatLonGrid datatype.  For now,
        just keep this code here.  Eventually will create a separate arcpy library """ 
    # Our lat/lon give the top right..arcgis wants in bottom left...
    # This map works for the USA CONUS, might need work for other areas of world
    # Move the lat to bottom left corner.     
    M = llg.getValues()

    dlat = llg.getCellSizeX()
    dlon = llg.getCellSizeY()

    ll = llg.getLowerLeft()
    log.info("Lowerleft is "+str(ll))
    lowerLeft = arcpy.Point(ll[0], ll[1])
    
    sr = arcpy.SpatialReference(4326) # WGS 1984
    myRaster = arcpy.NumPyArrayToRaster(M, lowerLeft, dlon, dlat, datatype.missingData)
    arcpy.DefineProjection_management(myRaster, sr)
   
    log.info("Attempting to write raster to "+outputlocation)
    #When using raster.save your choices are Geodatabase Raster, Esri Grid, GeoTiff and ERDAS imagine format.
    myRaster.save(outputlocation)
    llg.setRaster(myRaster)
        
    return myRaster

def readSingleFileToRaster(datafile, output, net, htmlOn=False, symbols=None, hFolder=None):
    """ Given a file location and an output location, 
        try to read it using the netcdf reader
        Everything here wraps through our interface so it will work 
        with ArcToolbox or with console """
    
    log.setDefaultProgress("Reading a single file...")
    
    # Get the reader from our netcdf module and read the file
    # into our 'datatype' class.  Then output to arcpy feature
    reader = getReader(datafile, net)
    D = netcdf_util.readNetcdfFile(reader)
    if D != None:
        D.setFileName(datafile)
    
    # Current only LatLonGrids can output to raster...
    # Most likely RadialSets will become polygon shapefiles or tables...etc...
    # We will probably want a table injest function for radial sets..
    
    newFeature = None
    if isinstance(D, LatLonGrid):
        # Create a new Raster feature for our LatLonGrid datatype
        newFeature = writeArcPyRaster(D, output)
        
        # Generate an HTML page for this Datatype, including our PNG file
        if htmlOn:
            log.info("Generating PNG and HTML files to "+hFolder)
            
            # Get a generated output file names for HTML and PNG
            baseName = w2res.getBaseMulti(datafile)
            pngName = baseName+".png"
            htmlName = baseName+".html"
            
            # Generate an PNG file page for this Raster
            generatePNGFile(D, output, hFolder, pngName, symbols)
            generateHTMLFile(D, hFolder, htmlName, pngName)
        
    else:
        log.info(">>>>>>>>>>>>>>>Skipping generation for non LatLonGrid type.")
        log.info("The type is "+str(type(D)))
    

    log.resetProgress()
    return newFeature
          
def readMultipleFiles(inFolder, outFolder, net, htmlOn=False):    
    """ Given a input folder and output folder, try to read
        every possible file in the tree, creating an equal converted
        file """
        
    # First walk to count all possible files...
    # This is just a guess since files could be added/removed from the tree
    # before the next call. I haven't figured out a better way to do this...
    # Could store the walk and then use that, but that could be a memory pig
    fileCount = 0
    for dir, sub, files in os.walk(inFolder):
        for f in files:
            fileCount += 1
    log.setStepProgress("Files", 0, fileCount, 1)
    
    # Now march each file and try to convert...
    c = 1
    for dir, sub, files in os.walk(inFolder):
        for f in files:
            log.setProgressLabel("Handling {0}, file {1}/{2}".format(f, c, fileCount))
            c += 1
            log.setProgressPosition()
            try:
                reader = getReader(f, net)
                D = netcdf_util.readNetcdfFile(reader)
                if D != None:
                    D.setFileName(f)
                log.info("Read file "+f)
            except:
                log.error("Got exception reading "+f)
                  
    log.resetProgress()
    
